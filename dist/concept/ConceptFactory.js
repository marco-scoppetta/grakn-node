"use strict";const SchemaConceptMethods=require("./methods/SchemaConcept"),RelationshipTypeMethods=require("./methods/RelationshipType"),ConceptMethods=require("./methods/Concept"),TypeMethods=require("./methods/Type"),ThingMethods=require("./methods/Thing"),AttributeMethods=require("./methods/Attribute"),RelationshipMethods=require("./methods/Relationship"),RuleMethods=require("./methods/Rule"),RoleMethods=require("./methods/Role"),AttributeTypeMethods=require("./methods/AttributeType"),EntityTypeMethods=require("./methods/EntityType");function ConceptFactory(a){this.txService=a}ConceptFactory.prototype.createConcept=function(a){const b=a.getId().getValue();let c;switch(a.getBasetype()){case 0:return c=buildState(b,ConceptMethods.ENTITY,this.txService),Object.create(entityProto,c);break;case 1:return c=buildState(b,ConceptMethods.RELATIONSHIP,this.txService),Object.create(relationshipProto,c);break;case 2:return c=buildState(b,ConceptMethods.ATTRIBUTE,this.txService),Object.create(attributeProto,c);break;case 3:return c=buildState(b,ConceptMethods.ENTITY_TYPE,this.txService),Object.create(entityTypeProto,c);break;case 4:return c=buildState(b,ConceptMethods.RELATIONSHIP_TYPE,this.txService),Object.create(relationshipTypeProto,c);break;case 5:return c=buildState(b,ConceptMethods.ATTRIBUTE_TYPE,this.txService),Object.create(attributeTypeProto,c);break;case 6:return c=buildState(b,ConceptMethods.ROLE,this.txService),Object.create(roleProto,c);break;case 7:return c=buildState(b,ConceptMethods.RULE,this.txService),Object.create(ruleProto,c);break;case 8:return c=buildState(b,ConceptMethods.META_TYPE,this.txService),Object.create(metaschemaProto,c);break;default:throw"BaseType not recognised.";}};function buildState(a,b,c){return{id:{value:a,enumerable:!0},baseType:{value:b,enumerable:!0},txService:{value:c,enumerable:!0}}}const attributeTypeProto=Object.assign(ConceptMethods.get(),SchemaConceptMethods.get(),TypeMethods.get(),AttributeTypeMethods.get()),relationshipTypeProto=Object.assign(ConceptMethods.get(),SchemaConceptMethods.get(),TypeMethods.get(),RelationshipTypeMethods.get()),entityTypeProto=Object.assign(ConceptMethods.get(),SchemaConceptMethods.get(),TypeMethods.get(),EntityTypeMethods.get()),relationshipProto=Object.assign(ConceptMethods.get(),ThingMethods.get(),RelationshipMethods.get()),attributeProto=Object.assign(ConceptMethods.get(),ThingMethods.get(),AttributeMethods.get()),entityProto=Object.assign(ConceptMethods.get(),ThingMethods.get()),roleProto=Object.assign(ConceptMethods.get(),SchemaConceptMethods.get(),RoleMethods.get()),ruleProto=Object.assign(ConceptMethods.get(),SchemaConceptMethods.get(),RuleMethods.get()),metaschemaProto=Object.assign(ConceptMethods.get(),SchemaConceptMethods.get());module.exports=ConceptFactory;