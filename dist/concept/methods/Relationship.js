"use strict";function _asyncToGenerator(a){return function(){var b=a.apply(this,arguments);return new Promise(function(a,c){function d(e,f){try{var g=b[e](f),h=g.value}catch(a){return void c(a)}return g.done?void a(h):Promise.resolve(h).then(function(a){d("next",a)},function(a){d("throw",a)})}return d("next")})}}const methods={allRolePlayers:(()=>{var a=_asyncToGenerator(function*(){const a=yield this.txService.getRolePlayers(this.id),b=new Map(a.map(function(a){return[a.role.id,a.role]})),c=new Map;a.forEach(function(a){const b=a.role.id;c.has(b)?c.set(b,c.get(b).add(a.player)):c.set(b,new Set([a.player]))});const d=new Map;return c.forEach(function(a,c){d.set(b.get(c),a)}),d});return function b(){return a.apply(this,arguments)}})(),rolePlayers:(()=>{var a=_asyncToGenerator(function*(...a){if(0<a.length)return this.txService.getRolePlayersByRoles(this.id,a);else{const a=yield this.txService.getRolePlayers(this.id),b=a.map(function(a){return a.player}),c=a.map(function(a){return a.player.id});return b.filter(function(a,b){return b===c.indexOf(a.id)})}});return function b(){return a.apply(this,arguments)}})(),addRolePlayer:function(a,b){return this.txService.setRolePlayer(this.id,a,b)},removeRolePlayer:function(a,b){return this.txService.unsetRolePlayer(this.id,a,b)}};module.exports={get:function(){return methods}};