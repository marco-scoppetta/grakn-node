"use strict";function _asyncToGenerator(a){return function(){var b=a.apply(this,arguments);return new Promise(function(a,c){function d(e,f){try{var g=b[e](f),h=g.value}catch(a){return void c(a)}return g.done?void a(h):Promise.resolve(h).then(function(a){d("next",a)},function(a){d("throw",a)})}return d("next")})}}const TxRequestBuilder=require("./util/TxRequestBuilder"),GrpcCommunicator=require("./util/GrpcCommunicator"),ConceptFactory=require("../../concept/ConceptFactory"),ResponseConverter=require("./util/ResponseConverter");function TxService(a){this.communicator=new GrpcCommunicator(a),this.respConverter=new ResponseConverter(new ConceptFactory(this),this.communicator)}TxService.prototype.close=function(){return this.communicator.end()},TxService.prototype.deleteConcept=function(a){const b=TxRequestBuilder.deleteConcept(a);return this.communicator.send(b)},TxService.prototype.getLabel=function(a){const b=TxRequestBuilder.getLabel(a);return this.communicator.send(b).then(a=>a.getConceptresponse().getLabel().getValue())},TxService.prototype.setLabel=function(a,b){const c=TxRequestBuilder.setLabel(a,b);return this.communicator.send(c)},TxService.prototype.isImplicit=function(a){const b=TxRequestBuilder.isImplicit(a);return this.communicator.send(b).then(a=>a.getConceptresponse().getBool())},TxService.prototype.getSubConcepts=function(a){const b=TxRequestBuilder.getSubConcepts(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getSuperConcepts=function(a){const b=TxRequestBuilder.getSuperConcepts(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getDirectSuperConcept=function(a){const b=TxRequestBuilder.getDirectSuperConcept(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromOptional(a))},TxService.prototype.setDirectSuperConcept=function(a,b){const c=TxRequestBuilder.setDirectSuperConcept(a,b);return this.communicator.send(c)},TxService.prototype.getWhen=function(a){const b=TxRequestBuilder.getWhen(a);return this.communicator.send(b).then(a=>this.respConverter.getOptionalPattern(a))},TxService.prototype.getThen=function(a){const b=TxRequestBuilder.getThen(a);return this.communicator.send(b).then(a=>this.respConverter.getOptionalPattern(a))},TxService.prototype.getRelationshipTypesThatRelateRole=function(a){const b=TxRequestBuilder.getRelationshipTypesThatRelateRole(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getTypesThatPlayRole=function(a){const b=TxRequestBuilder.getTypesThatPlayRole(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getInstances=function(a){const b=TxRequestBuilder.getInstances(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getAttributeTypes=function(a){const b=TxRequestBuilder.getAttributeTypes(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.setAttributeType=function(a,b){const c=TxRequestBuilder.setAttributeType(a,b);return this.communicator.send(c)},TxService.prototype.unsetAttributeType=function(a,b){const c=TxRequestBuilder.unsetAttributeType(a,b);return this.communicator.send(c)},TxService.prototype.getKeyTypes=function(a){const b=TxRequestBuilder.getKeyTypes(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.setKeyType=function(a,b){const c=TxRequestBuilder.setKeyType(a,b);return this.communicator.send(c)},TxService.prototype.unsetKeyType=function(a,b){const c=TxRequestBuilder.unsetKeyType(a,b);return this.communicator.send(c)},TxService.prototype.isAbstract=function(a){const b=TxRequestBuilder.isAbstract(a);return this.communicator.send(b).then(a=>a.getConceptresponse().getBool())},TxService.prototype.setAbstract=function(a,b){const c=TxRequestBuilder.setAbstract(a,b);return this.communicator.send(c)},TxService.prototype.getRolesPlayedByType=function(a){const b=TxRequestBuilder.getRolesPlayedByType(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.setRolePlayedByType=function(a,b){const c=TxRequestBuilder.setRolePlayedByType(a,b);return this.communicator.send(c)},TxService.prototype.unsetRolePlayedByType=function(a,b){const c=TxRequestBuilder.unsetRolePlayedByType(a,b);return this.communicator.send(c)},TxService.prototype.addEntity=function(a){const b=TxRequestBuilder.addEntity(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromResponse(a))},TxService.prototype.addRelationship=function(a){const b=TxRequestBuilder.addRelationship(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromResponse(a))},TxService.prototype.getRelatedRoles=function(a){const b=TxRequestBuilder.getRelatedRoles(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.setRelatedRole=function(a,b){const c=TxRequestBuilder.setRelatedRole(a,b);return this.communicator.send(c)},TxService.prototype.unsetRelatedRole=function(a,b){const c=TxRequestBuilder.unsetRelatedRole(a,b);return this.communicator.send(c)},TxService.prototype.putAttribute=(()=>{var a=_asyncToGenerator(function*(a,b){var c=this;const d=TxRequestBuilder.getDataTypeOfType(a),e=yield this.communicator.send(d),f=e.getConceptresponse().getOptionaldatatype().getPresent(),g=TxRequestBuilder.putAttribute(a,f,b);return this.communicator.send(g).then(function(a){return c.respConverter.conceptFromResponse(a)})});return function(){return a.apply(this,arguments)}})(),TxService.prototype.getAttribute=(()=>{var a=_asyncToGenerator(function*(a,b){var c=this;const d=TxRequestBuilder.getDataTypeOfType(a),e=yield this.communicator.send(d),f=e.getConceptresponse().getOptionaldatatype().getPresent(),g=TxRequestBuilder.getAttribute(a,f,b);return this.communicator.send(g).then(function(a){return c.respConverter.conceptFromOptional(a)})});return function(){return a.apply(this,arguments)}})(),TxService.prototype.getDataTypeOfType=function(a){const b=TxRequestBuilder.getDataTypeOfType(a);return this.communicator.send(b).then(a=>this.respConverter.getOptionalDataType(a))},TxService.prototype.getRegex=function(a){const b=TxRequestBuilder.getRegex(a);return this.communicator.send(b).then(a=>this.respConverter.getOptionalRegex(a))},TxService.prototype.setRegex=function(a,b){const c=TxRequestBuilder.setRegex(a,b);return this.communicator.send(c)},TxService.prototype.isInferred=function(a){const b=TxRequestBuilder.isInferred(a);return this.communicator.send(b).then(a=>a.getConceptresponse().getBool())},TxService.prototype.getDirectType=function(a){const b=TxRequestBuilder.getDirectType(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromResponse(a))},TxService.prototype.getRelationships=function(a){const b=TxRequestBuilder.getRelationships(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getRelationshipsByRoles=function(a,b){const c=TxRequestBuilder.getRelationshipsByRoles(a,b);return this.communicator.send(c).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getRolesPlayedByThing=function(a){const b=TxRequestBuilder.getRolesPlayedByThing(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getAttributes=function(a){const b=TxRequestBuilder.getAttributes(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getAttributesByTypes=function(a,b){const c=TxRequestBuilder.getAttributesByTypes(a,b);return this.communicator.send(c).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getKeys=function(a){const b=TxRequestBuilder.getKeys(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getKeysByTypes=function(a,b){const c=TxRequestBuilder.getKeysByTypes(a,b);return this.communicator.send(c).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.setAttribute=function(a,b){const c=TxRequestBuilder.setAttribute(a,b);return this.communicator.send(c)},TxService.prototype.unsetAttribute=function(a,b){const c=TxRequestBuilder.unsetAttribute(a,b);return this.communicator.send(c)},TxService.prototype.getRolePlayers=function(a){const b=TxRequestBuilder.getRolePlayers(a);return this.communicator.send(b).then(a=>this.respConverter.consumeRolePlayerIterator(a))},TxService.prototype.getRolePlayersByRoles=function(a,b){const c=TxRequestBuilder.getRolePlayersByRoles(a,b);return this.communicator.send(c).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.setRolePlayer=function(a,b,c){const d=TxRequestBuilder.setRolePlayer(a,b,c);return this.communicator.send(d)},TxService.prototype.unsetRolePlayer=function(a,b,c){const d=TxRequestBuilder.unsetRolePlayer(a,b,c);return this.communicator.send(d)},TxService.prototype.getValue=function(a){const b=TxRequestBuilder.getValue(a);return this.communicator.send(b).then(a=>this.respConverter.getAttributeValueFromResponse(a))},TxService.prototype.getOwners=function(a){const b=TxRequestBuilder.getOwners(a);return this.communicator.send(b).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.getDataTypeOfAttribute=function(a){const b=TxRequestBuilder.getDataTypeOfAttribute(a);return this.communicator.send(b).then(a=>this.respConverter.dataTypeToString(a.getConceptresponse().getDatatype()))},TxService.prototype.getConcept=function(a){const b=TxRequestBuilder.getConcept(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromOptional(a))},TxService.prototype.getSchemaConcept=function(a){const b=TxRequestBuilder.getSchemaConcept(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromOptional(a))},TxService.prototype.putEntityType=function(a){const b=TxRequestBuilder.putEntityType(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromResponse(a))},TxService.prototype.putRelationshipType=function(a){const b=TxRequestBuilder.putRelationshipType(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromResponse(a))},TxService.prototype.putRole=function(a){const b=TxRequestBuilder.putRole(a);return this.communicator.send(b).then(a=>this.respConverter.conceptFromResponse(a))},TxService.prototype.putRule=function(a,b,c){const d=TxRequestBuilder.putRule(a,b,c);return this.communicator.send(d).then(a=>this.respConverter.conceptFromResponse(a))},TxService.prototype.putAttributeType=function(a,b){const c=TxRequestBuilder.putAttributeType(a,b);return this.communicator.send(c).then(a=>this.respConverter.conceptFromResponse(a))},TxService.prototype.getAttributesByValue=function(a,b){const c=TxRequestBuilder.getAttributesByValue(a,b);return this.communicator.send(c).then(a=>this.respConverter.conceptsFromIterator(a))},TxService.prototype.openTx=function(a,b,c){const d=TxRequestBuilder.openTx(a,b,c);return this.communicator.send(d)},TxService.prototype.commit=function(){const a=TxRequestBuilder.commit();return this.communicator.send(a)},TxService.prototype.execute=function(a){const b=TxRequestBuilder.executeQuery(a);return this.communicator.send(b).then(a=>this.respConverter.executeResponse(a))},module.exports=TxService;