"use strict";const messages=require("../../../autogenerated/grakn_pb"),ConceptsBaseType=require("../../../concept/methods/Concept"),UNIT_MESSAGE=new messages.Unit;function RunConceptMethodRequest(a,b){const c=new messages.ConceptId;c.setValue(a);const d=new messages.TxRequest,e=new messages.RunConceptMethod;return e.setId(c),e.setConceptmethod(b),d.setRunconceptmethod(e),d}function convertBaseType(a){return a===ConceptsBaseType.ATTRIBUTE?messages.BaseType.ATTRIBUTE:a===ConceptsBaseType.ATTRIBUTE_TYPE?messages.BaseType.ATTRIBUTE_TYPE:a===ConceptsBaseType.ENTITY?messages.BaseType.ENTITY:a===ConceptsBaseType.ENTITY_TYPE?messages.BaseType.ENTITY_TYPE:a===ConceptsBaseType.RELATIONSHIP?messages.BaseType.RELATIONSHIP:a===ConceptsBaseType.RELATIONSHIP_TYPE?messages.BaseType.RELATIONSHIP_TYPE:a===ConceptsBaseType.ROLE?messages.BaseType.ROLE:a===ConceptsBaseType.RULE?messages.BaseType.RULE:a===ConceptsBaseType.META_TYPE?messages.BaseType.META_TYPE:void 0}function toGrpcConcept(a){if(!a.id)throw new Error("Provided Concept without Id field.");if(!a.baseType)throw new Error("Provided Concept without baseType field.");const b=new messages.Concept,c=new messages.ConceptId;return c.setValue(a.id),b.setId(c),b.setBasetype(convertBaseType(a.baseType)),b}function setAttributeValue(a,b,c){if(null==b)throw new Error("Datatype of AttributeType not specified.");switch(b){case 0:a.setString(c);break;case 1:a.setBoolean(c);break;case 2:a.setInteger(c);break;case 3:a.setLong(c);break;case 4:a.setFloat(c);break;case 5:a.setDouble(c);break;case 6:a.setDate(c);break;default:throw new Error("DataType of attribute not recognised.");}}const methods={deleteConcept:function(a){const b=new messages.ConceptMethod;return b.setDelete(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getLabel:function(a){const b=new messages.ConceptMethod;return b.setGetlabel(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},setLabel:function(a,b){const c=new messages.ConceptMethod,d=new messages.Label;return d.setValue(b),c.setSetlabel(d),RunConceptMethodRequest(a,c)},isImplicit:function(a){const b=new messages.ConceptMethod;return b.setIsimplicit(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getSubConcepts:function(a){const b=new messages.ConceptMethod;return b.setGetsubconcepts(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getSuperConcepts:function(a){const b=new messages.ConceptMethod;return b.setGetsuperconcepts(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getDirectSuperConcept:function(a){const b=new messages.ConceptMethod;return b.setGetdirectsuperconcept(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},setDirectSuperConcept:function(a,b){const c=new messages.ConceptMethod,d=toGrpcConcept(b);return c.setSetdirectsuperconcept(d),RunConceptMethodRequest(a,c)},getWhen:function(a){const b=new messages.ConceptMethod;return b.setGetwhen(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getThen:function(a){const b=new messages.ConceptMethod;return b.setGetthen(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getRelationshipTypesThatRelateRole:function(a){const b=new messages.ConceptMethod;return b.setGetrelationshiptypesthatrelaterole(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getTypesThatPlayRole:function(a){const b=new messages.ConceptMethod;return b.setGettypesthatplayrole(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getInstances:function(a){const b=new messages.ConceptMethod;return b.setGetinstances(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getAttributeTypes:function(a){const b=new messages.ConceptMethod;return b.setGetattributetypes(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},setAttributeType:function(a,b){const c=new messages.ConceptMethod;return c.setSetattributetype(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},unsetAttributeType:function(a,b){const c=new messages.ConceptMethod;return c.setUnsetattributetype(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},getKeyTypes:function(a){const b=new messages.ConceptMethod;return b.setGetkeytypes(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},setKeyType:function(a,b){const c=new messages.ConceptMethod;return c.setSetkeytype(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},unsetKeyType:function(a,b){const c=new messages.ConceptMethod;return c.setUnsetkeytype(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},isAbstract:function(a){const b=new messages.ConceptMethod;return b.setIsabstract(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},setAbstract:function(a,b){const c=new messages.ConceptMethod;return c.setSetabstract(b),RunConceptMethodRequest(a,c)},getRolesPlayedByType:function(a){const b=new messages.ConceptMethod;return b.setGetrolesplayedbytype(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},setRolePlayedByType:function(a,b){const c=new messages.ConceptMethod;return c.setSetroleplayedbytype(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},unsetRolePlayedByType:function(a,b){const c=new messages.ConceptMethod;return c.setUnsetroleplayedbytype(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},addEntity:function(a){const b=new messages.ConceptMethod;return b.setAddentity(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},addRelationship:function(a){const b=new messages.ConceptMethod;return b.setAddrelationship(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getRelatedRoles:function(a){const b=new messages.ConceptMethod;return b.setGetrelatedroles(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},setRelatedRole:function(a,b){const c=new messages.ConceptMethod;return c.setSetrelatedrole(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},unsetRelatedRole:function(a,b){const c=new messages.ConceptMethod;return c.setUnsetrelatedrole(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},putAttribute:function(a,b,c){const d=new messages.ConceptMethod,e=new messages.AttributeValue;return setAttributeValue(e,b,c),d.setPutattribute(e),RunConceptMethodRequest(a,d)},getAttribute:function(a,b,c){const d=new messages.ConceptMethod,e=new messages.AttributeValue;return setAttributeValue(e,b,c),d.setGetattribute(e),RunConceptMethodRequest(a,d)},getDataTypeOfType:function(a){const b=new messages.ConceptMethod;return b.setGetdatatypeoftype(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getRegex:function(a){const b=new messages.ConceptMethod;return b.setGetregex(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},setRegex:function(a,b){const c=new messages.ConceptMethod,d=new messages.OptionalRegex;return d.setPresent(b),c.setSetregex(d),RunConceptMethodRequest(a,c)},isInferred:function(a){const b=new messages.ConceptMethod;return b.setIsinferred(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getDirectType:function(a){const b=new messages.ConceptMethod;return b.setGetdirecttype(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getRelationships:function(a){const b=new messages.ConceptMethod;return b.setGetrelationships(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getRelationshipsByRoles:function(a,b){const c=new messages.Concepts,d=new messages.ConceptMethod,e=b.map(a=>toGrpcConcept(a));return c.setConceptList(e),d.setGetrelationshipsbyroles(c),RunConceptMethodRequest(a,d)},getRolesPlayedByThing:function(a){const b=new messages.ConceptMethod;return b.setGetrolesplayedbything(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getAttributes:function(a){const b=new messages.ConceptMethod;return b.setGetattributes(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getAttributesByTypes:function(a,b){const c=new messages.ConceptMethod,d=new messages.Concepts,e=b.map(a=>toGrpcConcept(a));return d.setConceptList(e),c.setGetattributesbytypes(d),RunConceptMethodRequest(a,c)},getKeys:function(a){const b=new messages.ConceptMethod;return b.setGetkeys(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getKeysByTypes:function(a,b){const c=new messages.ConceptMethod,d=new messages.Concepts,e=b.map(a=>toGrpcConcept(a));return d.setConceptList(e),c.setGetkeysbytypes(d),RunConceptMethodRequest(a,c)},setAttribute:function(a,b){const c=new messages.ConceptMethod;return c.setSetattribute(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},unsetAttribute:function(a,b){const c=new messages.ConceptMethod;return c.setUnsetattribute(toGrpcConcept(b)),RunConceptMethodRequest(a,c)},getRolePlayers:function(a){const b=new messages.ConceptMethod;return b.setGetroleplayers(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getRolePlayersByRoles:function(a,b){const c=new messages.ConceptMethod,d=new messages.Concepts,e=b.map(a=>toGrpcConcept(a));return d.setConceptList(e),c.setGetroleplayersbyroles(d),RunConceptMethodRequest(a,c)},setRolePlayer:function(a,b,c){const d=new messages.ConceptMethod,e=new messages.RolePlayer;return e.setRole(toGrpcConcept(b)),e.setPlayer(toGrpcConcept(c)),d.setSetroleplayer(e),RunConceptMethodRequest(a,d)},unsetRolePlayer:function(a,b,c){const d=new messages.ConceptMethod,e=new messages.RolePlayer;return e.setRole(toGrpcConcept(b)),e.setPlayer(toGrpcConcept(c)),d.setUnsetroleplayer(e),RunConceptMethodRequest(a,d)},getValue:function(a){const b=new messages.ConceptMethod;return b.setGetvalue(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getOwners:function(a){const b=new messages.ConceptMethod;return b.setGetowners(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getDataTypeOfAttribute:function(a){const b=new messages.ConceptMethod;return b.setGetdatatypeofattribute(UNIT_MESSAGE),RunConceptMethodRequest(a,b)},getConcept:function(a){const b=new messages.TxRequest,c=new messages.ConceptId;return c.setValue(a),b.setGetconcept(c),b},getSchemaConcept:function(a){const b=new messages.TxRequest,c=new messages.Label;return c.setValue(a),b.setGetschemaconcept(c),b},putEntityType:function(a){const b=new messages.TxRequest,c=new messages.Label;return c.setValue(a),b.setPutentitytype(c),b},putRelationshipType:function(a){const b=new messages.TxRequest,c=new messages.Label;return c.setValue(a),b.setPutrelationshiptype(c),b},putRole:function(a){const b=new messages.TxRequest,c=new messages.Label;return c.setValue(a),b.setPutrole(c),b},putRule:function(a,b,c){const d=new messages.Label;d.setValue(a);const e=new messages.Pattern,f=new messages.Pattern;e.setValue(b),f.setValue(c);const g=new messages.PutRule;g.setLabel(d),g.setWhen(e),g.setThen(f);const h=new messages.TxRequest;return h.setPutrule(g),h},putAttributeType:function(a,b){if(null==b)throw new Error("Datatype of AttributeType not specified.");const c=new messages.TxRequest,d=new messages.PutAttributeType,e=new messages.Label;return e.setValue(a),d.setLabel(e),d.setDatatype(b),c.setPutattributetype(d),c},getAttributesByValue:function(a,b){if(null==b)throw new Error("Datatype of AttributeType not specified.");const c=new messages.TxRequest,d=new messages.AttributeValue;return setAttributeValue(d,b,a),c.setGetattributesbyvalue(d),c},openTx:function(a,b,c){const d=new messages.Open,e=new messages.TxRequest,f=new messages.Keyspace;return f.setValue(a),d.setKeyspace(f),d.setTxtype(b),c&&(d.setUsername(c.username),d.setPassword(c.password)),e.setOpen(d),e},commit:function(){const a=new messages.Commit,b=new messages.TxRequest;return b.setCommit(a),b},executeQuery:function(a){const b=new messages.TxRequest,c=new messages.ExecQuery,d=new messages.Query;return d.setValue(a),c.setQuery(d),b.setExecquery(c),b},next:function(a){const b=new messages.Next;b.setIteratorid(a);const c=new messages.TxRequest;return c.setNext(b),c}};module.exports=methods;