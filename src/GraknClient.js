const GraknTx = require("./GraknTx");
const messages = require("./autogenerated/grakn_pb");
const services = require("./autogenerated/grakn_grpc_pb");
const grpc = require("grpc");
const TxService = require("./TxService");
const ConceptFactory = require("./ConceptFactory");


function GraknClient(uri, keyspace, credentials) {
  this.keyspace = keyspace;
  this.credentials = credentials;
  this.stub = new services.GraknClient(
    uri,
    grpc.credentials.createInsecure()
  );
}

/**
 * Create new GraknTx, executes query and closes transaction
 * @param {*} query Graql query string
 * @returns Query result
 */

GraknClient.prototype.execute = async function execute(query) {
  try {
    const tx = await this.open(this.txType.WRITE);
    const result = await tx.execute(query);
    tx.commit();
    return result;
  } catch (e) {
    throw e;
  }
};

/**
 * Create new GraknTx and send Open request to make it ready to be used.
 * @param {*} txType Type of transaction to open
 * @returns GraknTx
 */

GraknClient.prototype.open = async function (txType) {
  const conceptFactory = new ConceptFactory(this.stub);
  await conceptFactory.init(this.keyspace, txType, this.credentials);
  const txService = new TxService(this.stub, conceptFactory);
  // These initialisations are here to avoid asynchronous calls inside GraknTx constructor.
  await txService.openTx(this.keyspace, txType, this.credentials);
  const tx = new GraknTx(txService);
  return tx;
}

GraknClient.prototype.txType = {
  READ: messages.TxType.READ,
  WRITE: messages.TxType.WRITE,
  BATCH: messages.TxType.BATCH
};

GraknClient.prototype.close = function close() {
  this.stub.close();
}

module.exports = GraknClient;
