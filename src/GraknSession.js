const grpc = require("grpc");
const GraknTx = require("./GraknTx");
const messages = require("./autogenerated/grakn_pb");
const services = require("./autogenerated/grakn_grpc_pb");
const TxService = require("./service/Tx/TxService");
const DeleteService = require("./service/Delete/DeleteService");


/**
 * Creates new GraknSession object that can be used to:
 *  - open a new GraknTx
 *  - delete Keyspace
 * 
 * @param {String} uri String containing host and port of a valid Grakn server 
 * @param {String} keyspace Grakn keyspace to which this sessions should be bound to
 * @param {Object} credentials Optional object containing user credentials - only used when connecting to a KGMS instance
 */
function GraknSession(uri, keyspace, credentials) {
  this.keyspace = keyspace;
  this.credentials = credentials;
  this.stub = new services.GraknClient(uri, grpc.credentials.createInsecure());
}

/**
 * Method used to create new GraknTx, which also send Open request to make the tx ready to be used.
 * @param {GraknSession.txType} txType Type of transaction to open READ, WRITE or BATCH
 * @returns GraknTx
 */
GraknSession.prototype.open = async function (txType) {
  const txService = new TxService(this.stub.tx());
  await txService.openTx(this.keyspace, txType, this.credentials).catch(e => { throw e; });
  const tx = new GraknTx(txService);
  return tx;
}

/**
 * Method used to delete the keyspace to which this session is bound to.
 */
GraknSession.prototype.deleteKeyspace = function () {
  return DeleteService.delete(this.keyspace);
}

/**
 * List of available transaction types supported by Grakn
 */
GraknSession.prototype.txType = {
  READ: messages.TxType.READ,
  WRITE: messages.TxType.WRITE,
  BATCH: messages.TxType.BATCH
};

/**
 * List of available dataTypes for Grakn Attributes
 */
GraknSession.prototype.dataType = {
  STRING: messages.DataType.STRING,
  BOOLEAN: messages.DataType.BOOLEAN,
  INTEGER: messages.DataType.INTEGER,
  LONG: messages.DataType.LONG,
  FLOAT: messages.DataType.FLOAT,
  DOUBLE: messages.DataType.DOUBLE,
  DATE: messages.DataType.DATE
};

/**
 * Method used to close current graknSession
 */
GraknSession.prototype.close = function close() {
  grpc.closeClient(this.stub);
}

module.exports = GraknSession;
