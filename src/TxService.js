const messages = require("./autogenerated/grakn_pb");
const GrpcIterator = require("./util/GrpcIterator");
const MethodBuilder = require("./util/MethodBuilder");

/**
 * This module executes the methods provided by the gRPC Tx service defined
 * inside grakn.proto and returns responses in JS data types.
 * It has 2 collaborators:
 *  - a communicator which handles gRPC requests/responses over a duplex Stream
 *  - a factory to build {Concept} objects from gRPC responses 
 */

function TxService(communicator, factory) {
    this.communicator = communicator;
    this.conceptFactory = factory;
}

//   ==============  DATA INSTANCES ================== //

//Thing gRPC methods

TxService.prototype.getRolesPlayedByThing = function (id) {
    const getRolesPlayedByThingMethod = MethodBuilder.getRolesPlayedByThing(id);
    return this._executeAndParse(getRolesPlayedByThingMethod);
}
TxService.prototype.getRelationships = function (id) {
    const getRelationshipsMethod = MethodBuilder.getRelationships(id);
    return this._executeAndParse(getRelationshipsMethod);
}
TxService.prototype.isInferred = function (id) {
    const isInferredMethod = MethodBuilder.isInferred(id);
    return this.communicator.send(isInferredMethod)
        .then(resp => resp.getConceptresponse().getBool())
        .catch(e => { throw e; });
}
TxService.prototype.getDirectType = function (id) { };
TxService.prototype.getRelationshipsByRole = function (id) { };
TxService.prototype.getAttributes = function (id) { };
TxService.prototype.getAttributesByTypes = function (id) { };
TxService.prototype.getKeys = function (id) { };
TxService.prototype.getKeysByTypes = function (id) { };
TxService.prototype.setAttribute = function (id) { };
TxService.prototype.unsetAttribute = function (id) { };



// Attribute gRPC methods

TxService.prototype.getValue = function (id) { };
TxService.prototype.getOwners = function (id) { };

// Relationship gRPC methods

TxService.prototype.addRelationship = function (id) { };
TxService.prototype.getRolePlayers = function (id) { };
TxService.prototype.getRolePlayersByRoles = function (id) { };
TxService.prototype.setRolePlayer = function (id) { };
TxService.prototype.unsetRolePlayer = function (id) { };




// ================= SCHEMA =================== //

// Concepts gRPC methods

TxService.prototype.delete = function (id) {
    const deleteMethod = MethodBuilder.delete(this.id);
    return this.communicator.send(deleteMethod);
};

// Schema concept gRPC methods
TxService.prototype.getLabel = function (id) {
    const getLabelMethod = MethodBuilder.getLabel(id);
    return this.communicator
        .send(getLabelMethod)
        .then(resp =>
            resp.getConceptresponse()
                .getLabel()
                .getValue()
        ).catch(e => { throw e; });
}

TxService.prototype.isImplicit = function (id) {
    const isImplicitMethod = MethodBuilder.isImplicit(id);
    return this.communicator
        .send(isImplicitMethod)
        .then(resp => resp.getConceptresponse().getBool())
        .catch(e => { throw e; });
}

TxService.prototype.setLabel = function (id) { };
TxService.prototype.getSubConcepts = function (id) { };
TxService.prototype.getSuperConcepts = function (id) { };
TxService.prototype.getDirectSuperConcept = function (id) { };
TxService.prototype.setDirectSuperConcept = function (id) { };

// Type concept gRPC methods

TxService.prototype.getInstances = function (id) { };


// Relationship Type concept gRPC methods

TxService.prototype.getRelatedRoles = function (id) {
    const getRelatedRolesMethod = MethodBuilder.getRelatedRoles(id);
    return this.communicator
        .send(getRelatedRolesMethod)
        .then(async result => {
            const iterator = new GrpcIterator.GrpcConceptIterator(
                result.getConceptresponse().getIteratorid(),
                this.communicator
            );
            return await _buildConcepts(iterator, this);
        });
}

TxService.prototype.setRelatedRole = function (id) { };
TxService.prototype.unsetRelatedRole = function (id) { };


// Entity type concept gRPC methods

TxService.prototype.addEntity = function (id) { };

//This method should be move to an Helper class!
TxService.prototype._executeAndParse = function (method) {
    return this.communicator
        .send(method)
        .then(async result => {
            const iterator = new GrpcIterator.GrpcConceptIterator(
                result.getConceptresponse().getIteratorid(),
                this.communicator
            );
            return await _buildConcepts(iterator, this);
        });
}

// Role gRPC methods

TxService.prototype.getRelationshipTypesThatRelateRole = function (id) { }
TxService.prototype.getTypesThatPlayRole = function (id) { }

// Rule gRPC methods 

TxService.prototype.getWhen = function (id) { };
TxService.prototype.getThen = function (id) { };

// ====== UTILS METHODS =====//

async function _buildConcepts(iterator, txService) {
    const concepts = [];
    let concept = await iterator.nextResult().catch(e => { throw e; });
    while (concept) {
        concepts.push(txService.conceptFactory.createConcept(concept, txService));
        concept = await iterator.nextResult().catch(e => { throw e; });
    }
    return concepts;
}


TxService.prototype._parseResponse = async function parseResponse(resp) {
    if (resp.hasDone()) return [];
    if (resp.hasIteratorid()) {
        const iterator = new GrpcIterator.GrpcQueryIterator(
            resp.getIteratorid(),
            this.communicator
        );
        const executeQueryResult = [];
        let nextResult = await iterator.nextResult();
        while (nextResult) {
            executeQueryResult.push(this._parseResult(nextResult));
            nextResult = await iterator.nextResult();
        }
        return executeQueryResult;
    }
};

TxService.prototype._parseResult = function parseResult(queryResult) {
    if (queryResult.hasOtherresult()) {
        // compute or aggregate query
        return JSON.parse(queryResult.getOtherresult());
    } else {
        const answerMap = new Map();
        queryResult
            .getAnswer()
            .getAnswerMap()
            .forEach((grpcConcenpt, key) => {
                answerMap.set(
                    key,
                    this.conceptFactory.createConcept(grpcConcenpt, this));
            });
        return answerMap;
    }
};

TxService.prototype.openTx = async function (keyspace, txType, credentials) {
    const openRequest = new messages.Open();
    const txRequest = new messages.TxRequest();
    const messageKeyspace = new messages.Keyspace();
    messageKeyspace.setValue(keyspace);

    openRequest.setKeyspace(messageKeyspace);
    openRequest.setTxtype(messages.TxType.WRITE);
    openRequest.setUsername(credentials.username);
    openRequest.setPassword(credentials.password);
    txRequest.setOpen(openRequest);

    await this.communicator.send(txRequest)
        // Explicitly catch and re-throw exception otherwise it will be swallowed by promises
        .catch((e) => {
            throw e;
        });
};

TxService.prototype.execute = async function executeQuery(query) {
    this.result = [];
    const txRequest = new messages.TxRequest();
    const executeQuery = new messages.ExecQuery();
    const queryRequest = new messages.Query();
    queryRequest.setValue(query);
    executeQuery.setQuery(queryRequest);
    txRequest.setExecquery(executeQuery);
    return await this.communicator
        .send(txRequest)
        .then(resp => this._parseResponse(resp))
        .catch((e) => {
            throw e;
        });
};

module.exports = TxService;