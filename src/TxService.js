const messages = require("./autogenerated/grakn_pb");
const GrpcIterator = require("./util/GrpcIterator");
const TxRequestBuilder = require("./util/TxRequestBuilder");
const GrpcCommunicator = require("./util/GrpcCommunicator");
const ConceptFactory = require("./ConceptFactory");


/**
 * This module executes the methods provided by the gRPC Tx service defined
 * inside grakn.proto and returns responses in JS data types.
 * It has 2 collaborators:
 *  - a communicator which handles gRPC requests/responses over a duplex Stream
 *  - a factory to build {Concept} objects from gRPC responses 
 */

function TxService(stub) {
    this.communicator = new GrpcCommunicator(stub.tx());
    this.conceptFactory = new ConceptFactory(this);
}

// Concept

TxService.prototype.delete = function (id) {
    const deleteTxRequest = TxRequestBuilder.delete(this.id);
    return this.communicator.send(deleteTxRequest)
        .catch(e => { throw e; });
};

// Schema concept
TxService.prototype.getLabel = function (id) {
    const getLabelTxRequest = TxRequestBuilder.getLabel(id);
    return this.communicator
        .send(getLabelTxRequest)
        .then(resp => resp.getConceptresponse().getLabel().getValue()
        ).catch(e => { throw e; });
}

TxService.prototype.setLabel = function (id, label) {
    const setLabelTxRequest = TxRequestBuilder.setLabel(id, label);
    return this.communicator.send(setLabelTxRequest)
        .catch(e => { throw e; });
};

TxService.prototype.isImplicit = function (id) {
    const isImplicitTxRequest = TxRequestBuilder.isImplicit(id);
    return this.communicator
        .send(isImplicitTxRequest)
        .then(resp => resp.getConceptresponse().getBool())
        .catch(e => { throw e; });
}

TxService.prototype.getSubConcepts = function (id) {
    const getSubConceptsTxRequest = TxRequestBuilder.getSubConcepts(id);
    return this.communicator.send(getSubConceptsTxRequest)
        .then(grpcConceptResponse => _consumeConceptIterator(grpcConceptResponse, this))
        .catch(e => { throw e; });
};
TxService.prototype.getSuperConcepts = function (id) {
    const getSuperConceptsTxRequest = TxRequestBuilder.getSuperConcepts(id);
    return this.communicator.send(getSuperConceptsTxRequest)
        .then(grpcConceptResponse => _consumeConceptIterator(grpcConceptResponse, this))
        .catch(e => { throw e; });
};
TxService.prototype.getDirectSuperConcept = function (id) {
    const TxRequest = TxRequestBuilder.getDirectSuperConcept(id);
    return this.communicator.send(TxRequest)
        .then(grpcConceptResponse => {
            const optionalConcept = grpcConceptResponse.getConceptresponse().getOptionalconcept();
            if (optionalConcept.hasPresent()) {
                const concept = optionalConcept.getPresent();
                return this.conceptFactory.createConcept(concept);
            } else {
                return null;
            }
        })
        .catch(e => { throw e; });
};
TxService.prototype.setDirectSuperConcept = function (id) {

};

// Rule 

TxService.prototype.getWhen = function (id) { };
TxService.prototype.getThen = function (id) { };

// Role

TxService.prototype.getRelationshipTypesThatRelateRole = function (id) {
    const txRequest = TxRequestBuilder.getRelationshipTypesThatRelateRole(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
}
TxService.prototype.getTypesThatPlayRole = function (id) {
    const txRequest = TxRequestBuilder.getTypesThatPlayRole(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
}

// Type

TxService.prototype.getInstances = function (id) {
    const txRequest = TxRequestBuilder.getInstances(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.getAttributeTypes = function (id) {
    const txRequest = TxRequestBuilder.getAttributeTypes(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.setAttributeType = function (id) { };
TxService.prototype.unsetAttributeType = function (id) { };
TxService.prototype.getKeyTypes = function (id) {
    const txRequest = TxRequestBuilder.getKeyTypes(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.setKeyType = function (id) { };
TxService.prototype.unsetKeyType = function (id) { };
TxService.prototype.isAbstract = function (id) {
    const txRequest = TxRequestBuilder.isAbstract(id);
    return this.communicator.send(txRequest)
        .then(resp => resp.getConceptresponse().getBool())
        .catch(e => { throw e; });
};
TxService.prototype.setAbstract = function (id, bool) {
    const txRequest = TxRequestBuilder.setAbstract(id, bool);
    return this.communicator.send(txRequest)
        .catch(e => { throw e; });
};
TxService.prototype.getRolesPlayedByType = function (id) {
    const txRequest = TxRequestBuilder.getRolesPlayedByType(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.setRolePlayedByType = function (id) { };
TxService.prototype.unsetRolePlayedByType = function (id) { };

// Entity type

TxService.prototype.addEntity = function (id) {
    const txRequest = TxRequestBuilder.addEntity(id);
    return this.communicator.send(txRequest)
        .then(response => this.conceptFactory.createConcept(response.getConceptresponse().getConcept()))
        .catch(e => { throw e; });
};

// Relationship Type

TxService.prototype.getRelatedRoles = function (id) {
    const txRequest = TxRequestBuilder.getRelatedRoles(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
}

TxService.prototype.setRelatedRole = function (id) { };
TxService.prototype.unsetRelatedRole = function (id) { };



// Attribute type
TxService.prototype.putAttribute = async function (id, value) {
    const dataTypeTxRequest = TxRequestBuilder.getDataTypeOfType(id);
    const resp = await this.communicator.send(dataTypeTxRequest);
    const dataType = resp.getConceptresponse().getOptionaldatatype().getPresent();
    const txRequest = TxRequestBuilder.putAttribute(id, dataType, value);
    const response = await this.communicator.send(txRequest);
    return this.communicator.send(txRequest)
        .then(response => this.conceptFactory.createConcept(response.getConceptresponse().getConcept()))
        .catch(e => { throw e; });
};
TxService.prototype.getAttribute = function (id) { };
TxService.prototype.getDataTypeOfType = function (id) {
    const txRequest = TxRequestBuilder.getDataTypeOfType(id);
    return this.communicator.send(txRequest)
        .then(response => {
            const optionalDatatype = response.getConceptresponse().getOptionaldatatype();
            return (optionalDatatype.hasPresent()) ? _dataTypeToString(optionalDatatype.getPresent()) : null;
        })
        .catch(e => { throw e; });
};
TxService.prototype.getRegex = function (id) { };
TxService.prototype.setRegex = function (id) { };


//Thing

TxService.prototype.isInferred = function (id) {
    const txRequest = TxRequestBuilder.isInferred(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
}

TxService.prototype.getDirectType = function (id) {
    const txRequest = TxRequestBuilder.getDirectType(id);
    return this.communicator.send(txRequest)
        .then(response => {
            const concept = response.getConceptresponse().getConcept();
            return this.conceptFactory.createConcept(concept);
        })
        .catch(e => { throw e; });
};

TxService.prototype.getRelationships = function (id) {
    const txRequest = TxRequestBuilder.getRelationships(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
}

TxService.prototype.getRelationshipsByRoles = function (id, roles) {
    const txRequest = TxRequestBuilder.getRelationshipsByRoles(id, roles);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};

TxService.prototype.getRolesPlayedByThing = function (id) {
    const txRequest = TxRequestBuilder.getRolesPlayedByThing(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
}

TxService.prototype.getAttributes = function (id) {
    const txRequest = TxRequestBuilder.getAttributes(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.getAttributesByTypes = function (id) {
    const txRequest = TxRequestBuilder.getAttributesByTypes(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.getKeys = function (id) {
    const txRequest = TxRequestBuilder.getAttributesByTypes(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.getKeysByTypes = function (id) {
    const txRequest = TxRequestBuilder.getAttributesByTypes(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.setAttribute = function (id, attribute) {
    const txRequest = TxRequestBuilder.setAttribute(id, attribute);
    return this.communicator.send(txRequest)
        .catch(e => { throw e; });
};
TxService.prototype.unsetAttribute = function (id, attribute) {
    const txRequest = TxRequestBuilder.unsetAttribute(id, attribute);
    return this.communicator.send(txRequest)
        .catch(e => { throw e; });
};

// Relationship

TxService.prototype.addRelationship = function (id) { };
TxService.prototype.getRolePlayers = function (id) {
    const txRequest = TxRequestBuilder.getRolePlayers(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeRolePlayerIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.getRolePlayersByRoles = function (id, roles) {
    const txRequest = TxRequestBuilder.getRolePlayersByRoles(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};
TxService.prototype.setRolePlayer = function (id) { };
TxService.prototype.unsetRolePlayer = function (id) { };


// Attribute

function _getAttributeValue(resp) {
    const attrValue = resp.getConceptresponse().getAttributevalue();
    if (attrValue.hasString()) return attrValue.getString();
    if (attrValue.hasBoolean()) return attrValue.getBoolean();
    if (attrValue.hasInteger()) return attrValue.getInteger();
    if (attrValue.hasLong()) return attrValue.getLong();
    if (attrValue.hasFloat()) return attrValue.getFloat();
    if (attrValue.hasDouble()) return attrValue.getDouble();
    if (attrValue.hasDate()) return attrValue.getDate();
}

TxService.prototype.getValue = function (id) {
    const txRequest = TxRequestBuilder.getValue(id);
    return this.communicator.send(txRequest)
        .then(response => _getAttributeValue(response))
        .catch(e => { throw e; });
};
TxService.prototype.getOwners = function (id) {
    const txRequest = TxRequestBuilder.getOwners(id);
    return this.communicator.send(txRequest)
        .then(response => _consumeConceptIterator(response, this))
        .catch(e => { throw e; });
};


function _dataTypeToString(dataType) {
    switch (dataType) {
        case 0: return "String";
        case 1: return "Boolean";
        case 2: return "Integer";
        case 3: return "Long";
        case 4: return "Float";
        case 5: return "Double";
        case 6: return "Date";
    }
}

TxService.prototype.getDataTypeOfAttribute = function (id) {
    const txRequest = TxRequestBuilder.getDataTypeOfAttribute(id);
    return this.communicator.send(txRequest)
        .then(response => _dataTypeToString(response.getConceptresponse().getDatatype()))
        .catch(e => { throw e; });
};


// ====== UTILS METHODS =====//


/**
 * This method creates and consumes an iterator (until server returns Done) and build Concept object from
 * every response.
 * @param {*} grpcConceptResponse gRPC response that will contain iteratorId
 * @param {*} txService txService implementation needed to be injected to new concepts that will be built
 */
async function _consumeConceptIterator(grpcConceptResponse, txService) {
    const iterator = new GrpcIterator.GrpcConceptIterator(
        grpcConceptResponse.getConceptresponse().getIteratorid(),
        txService.communicator
    );
    const concepts = [];
    let concept = await iterator.nextResult().catch(e => { throw e; });
    while (concept) {
        concepts.push(txService.conceptFactory.createConcept(concept));
        concept = await iterator.nextResult().catch(e => { throw e; });
    }
    return concepts;
}

async function _consumeRolePlayerIterator(grpcConceptResponse, txService) {
    const iterator = new GrpcIterator.GrpcRolePlayerIterator(
        grpcConceptResponse.getConceptresponse().getIteratorid(),
        txService.communicator
    );
    const rolePlayers = [];
    let grpcRolePlayer = await iterator.nextResult().catch(e => { throw e; });
    while (grpcRolePlayer) {
        rolePlayers.push({
            role: txService.conceptFactory.createConcept(grpcRolePlayer.getRole()),
            player: txService.conceptFactory.createConcept(grpcRolePlayer.getPlayer())
        });
        grpcRolePlayer = await iterator.nextResult().catch(e => { throw e; });
    }
    return rolePlayers;
}

// ======================= Grakn transaction methods ========================= //


TxService.prototype.getConcept = function (conceptId) {
    const txRequest = new messages.TxRequest();
    const conceptIdMessage = new messages.ConceptId();
    conceptIdMessage.setValue(conceptId);
    txRequest.setGetconcept(conceptIdMessage);
    return this.communicator
        .send(txRequest)
        .then((response) => {
            const optionalConcept = response.getOptionalconcept();
            if (optionalConcept.hasPresent())
                return this.conceptFactory.createConcept(optionalConcept.getPresent());
            else
                return null;
        })
        .catch((e) => {
            throw e;
        });;

}

TxService.prototype.getSchemaConcept = function (label) {
    const txRequest = new messages.TxRequest();
    const labelMessage = new messages.Label();
    labelMessage.setValue(label);
    txRequest.setGetschemaconcept(labelMessage);
    return this.communicator
        .send(txRequest)
        .then((response) => {
            const optionalConcept = response.getOptionalconcept();
            if (optionalConcept.hasPresent())
                return this.conceptFactory.createConcept(optionalConcept.getPresent());
            else
                return null;
        })
        .catch((e) => {
            throw e;
        });;
}

TxService.prototype.putEntityType = function (label) {
    const txRequest = new messages.TxRequest();
    const labelMessage = new messages.Label();
    labelMessage.setValue(label);
    txRequest.setPutentitytype(labelMessage);
    return this.communicator
        .send(txRequest)
        .then(response => this.conceptFactory.createConcept(response.getConcept()))
        .catch((e) => {
            throw e;
        });;
}

TxService.prototype.putRelationshipType = function (label) {
    const txRequest = new messages.TxRequest();
    const labelMessage = new messages.Label();
    labelMessage.setValue(label);
    txRequest.setPutrelationshiptype(labelMessage);
    return this.communicator
        .send(txRequest)
        .then(response => this.conceptFactory.createConcept(response.getConcept()))
        .catch((e) => {
            throw e;
        });;
}

TxService.prototype.putAttributeType = function (label, dataType) {
    const txRequest = new messages.TxRequest();
    const putMessage = new messages.PutAttributeType();
    const labelMessage = new messages.Label();
    labelMessage.setValue(label);
    putMessage.setLabel(labelMessage);
    putMessage.setDatatype(dataType);
    txRequest.setPutattributetype(putMessage);
    return this.communicator
        .send(txRequest)
        .then(response => this.conceptFactory.createConcept(response.getConcept()))
        .catch((e) => {
            throw e;
        });;
}


// OPEN TRANSACTION

TxService.prototype.openTx = function (keyspace, txType, credentials) {
    const openRequest = new messages.Open();
    const txRequest = new messages.TxRequest();
    const messageKeyspace = new messages.Keyspace();
    messageKeyspace.setValue(keyspace);

    openRequest.setKeyspace(messageKeyspace);
    openRequest.setTxtype(messages.TxType.WRITE);
    if (credentials) {
        openRequest.setUsername(credentials.username);
        openRequest.setPassword(credentials.password);
    }
    txRequest.setOpen(openRequest);

    return this.communicator.send(txRequest)
        // Explicitly catch and re-throw exception otherwise it will be swallowed by promises
        .catch((e) => {
            throw e;
        });
};

// COMMIT TRANSACTION

TxService.prototype.commit = function () {
    const commitRequest = new messages.Commit();
    const txRequest = new messages.TxRequest();
    txRequest.setCommit(commitRequest);
    return this.communicator.send(txRequest).catch((e) => {
        throw e;
    });
}


// EXEC QUERY
/**
 * Execute query and always return array of concepts. Returns empty array if server
 * returns Done.
 */

TxService.prototype.execute = function executeQuery(query) {
    const txRequest = new messages.TxRequest();
    const executeQuery = new messages.ExecQuery();
    const queryRequest = new messages.Query();
    queryRequest.setValue(query);
    executeQuery.setQuery(queryRequest);
    txRequest.setExecquery(executeQuery);
    return this.communicator
        .send(txRequest)
        .then(resp => this._parseResponse(resp))
        .catch((e) => {
            throw e;
        });
};

TxService.prototype._parseResponse = async function parseResponse(resp) {
    if (resp.hasDone()) return [];
    if (resp.hasIteratorid()) {
        const iterator = new GrpcIterator.GrpcQueryIterator(
            resp.getIteratorid(),
            this.communicator
        );
        const executeQueryResult = [];
        let nextResult = await iterator.nextResult();
        while (nextResult) {
            executeQueryResult.push(this._parseResult(nextResult));
            nextResult = await iterator.nextResult();
        }
        return executeQueryResult;
    }
    if (resp.hasQueryresult()) {
        return [this._parseResult(resp.getQueryresult())];
    }
};

TxService.prototype._parseResult = function parseResult(queryResult) {
    if (queryResult.hasOtherresult()) {
        // compute or aggregate query
        return JSON.parse(queryResult.getOtherresult());
    } else {
        const answerMap = new Map();
        queryResult
            .getAnswer()
            .getAnswerMap()
            .forEach((grpcConcept, key) => {
                answerMap.set(
                    key,
                    this.conceptFactory.createConcept(grpcConcept));
            });
        return answerMap;
    }
};

module.exports = TxService;