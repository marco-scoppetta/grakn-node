const messages = require("./autogenerated/grakn_pb");
const GrpcIterator = require("./util/GrpcIterator");

/**
 * This module executes the methods provided by the gRPC Tx service defined
 * inside grakn.proto and returns responses in JS data types.
 * It has 2 collaborators:
 *  - a communicator which handles gRPC requests/responses over a duplex Stream
 *  - a factory to build {Concept} objects from gRPC responses 
 */

function TxService(communicator, factory) {
    this.communicator = communicator;
    this.conceptFactory = factory;
}

TxService.prototype._parseResponse = async function parseResponse(resp) {
    if (resp.hasDone()) return [];
    if (resp.hasIteratorid()) {
        const iterator = new GrpcIterator.GrpcQueryIterator(
            resp.getIteratorid(),
            this.communicator
        );
        const executeQueryResult = [];
        let nextResult = await iterator.nextResult();
        while (nextResult) {
            executeQueryResult.push(this._parseResult(nextResult));
            nextResult = await iterator.nextResult();
        }
        return executeQueryResult;
    }
};

TxService.prototype._parseResult = function parseResult(queryResult) {
    if (queryResult.hasOtherresult()) {
        // compute or aggregate query
        this.result = JSON.parse(queryResult.getOtherresult());
    } else {
        const answerMap = new Map();
        queryResult
            .getAnswer()
            .getAnswerMap()
            .forEach((grpcConcenpt, key) => {
                answerMap.set(
                    key,
                    this.conceptFactory.createConcept(grpcConcenpt, this.communicator, this.conceptFactory)
                );
            });
        return answerMap;
    }
};

TxService.prototype.openTx = async function (keyspace, txType, credentials) {
    const openRequest = new messages.Open();
    const txRequest = new messages.TxRequest();
    const messageKeyspace = new messages.Keyspace();
    messageKeyspace.setValue(keyspace);

    openRequest.setKeyspace(messageKeyspace);
    openRequest.setTxtype(messages.TxType.WRITE);
    openRequest.setUsername(credentials.username);
    openRequest.setPassword(credentials.password);
    txRequest.setOpen(openRequest);

    await this.communicator.send(txRequest)
        // Explicitly catch and re-throw exception otherwise it will be swallowed by promises
        .catch((e) => {
            throw e;
        });
};

TxService.prototype.execute = async function executeQuery(query) {
    this.result = [];
    const txRequest = new messages.TxRequest();
    const executeQuery = new messages.ExecQuery();
    const queryRequest = new messages.Query();
    queryRequest.setValue(query);
    executeQuery.setQuery(queryRequest);
    txRequest.setExecquery(executeQuery);
    return await this.communicator
        .send(txRequest)
        .then(resp => this._parseResponse(resp))
        .catch((e) => {
            throw e;
        });
};

module.exports = TxService;