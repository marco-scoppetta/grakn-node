const messages = require("../autogenerated/grakn_pb");
const conceptMessages = require("../autogenerated/concept_pb");

// check if concept messages is necessary!!!!!!!!

function deleteConcept(conceptId) {
  const TxRequest = new messages.TxRequest();
  const runConceptMethodRequest = new messages.RunConceptMethod();
  const conceptMethod = new conceptMessages.ConceptMethod();
  const unit = new conceptMessages.Unit();
  conceptMethod.setDelete(unit);
  runConceptMethodRequest.setId(conceptId);
  runConceptMethodRequest.setConceptmethod(conceptMethod);
  TxRequest.setRunconceptmethod(runConceptMethodRequest);
  return TxRequest;
}

function getLabel(conceptId) {
  const TxRequest = new messages.TxRequest();
  const runConceptMethodRequest = new messages.RunConceptMethod();
  const conceptMethod = new conceptMessages.ConceptMethod();
  const unit = new conceptMessages.Unit();
  conceptMethod.setGetlabel(unit);
  runConceptMethodRequest.setId(conceptId);
  runConceptMethodRequest.setConceptmethod(conceptMethod);
  TxRequest.setRunconceptmethod(runConceptMethodRequest);
  return TxRequest;
}

function isImplicit(conceptId) {
  const TxRequest = new messages.TxRequest();
  const runConceptMethodRequest = new messages.RunConceptMethod();
  const conceptMethod = new conceptMessages.ConceptMethod();
  const unit = new conceptMessages.Unit();
  conceptMethod.setIsimplicit(unit);
  runConceptMethodRequest.setId(conceptId);
  runConceptMethodRequest.setConceptmethod(conceptMethod);
  TxRequest.setRunconceptmethod(runConceptMethodRequest);
  return TxRequest;
}

function isInferred(conceptId) {
  const TxRequest = new messages.TxRequest();
  const runConceptMethodRequest = new messages.RunConceptMethod();
  const conceptMethod = new conceptMessages.ConceptMethod();
  const unit = new conceptMessages.Unit();
  conceptMethod.setIsinferred(unit);
  runConceptMethodRequest.setId(conceptId);
  runConceptMethodRequest.setConceptmethod(conceptMethod);
  TxRequest.setRunconceptmethod(runConceptMethodRequest);
  return TxRequest;
}

function getRelatedRoles(conceptId) {
  const TxRequest = new messages.TxRequest();
  const runConceptMethodRequest = new messages.RunConceptMethod();
  const conceptMethod = new conceptMessages.ConceptMethod();
  const unit = new conceptMessages.Unit();
  conceptMethod.setGetrelatedroles(unit);
  runConceptMethodRequest.setId(conceptId);
  runConceptMethodRequest.setConceptmethod(conceptMethod);
  TxRequest.setRunconceptmethod(runConceptMethodRequest);
  return TxRequest;
}

module.exports = {
  delete: deleteConcept,
  getLabel,
  isImplicit,
  getRelatedRoles,
  isInferred
};
